# Generated by Django 5.2.2 on 2025-06-13 02:33

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Accommodation',
            fields=[
                ('accommodation_id', models.AutoField(primary_key=True, serialize=False, verbose_name='Accommodation ID')),
                ('store_name', models.CharField(max_length=100, verbose_name='Store Name')),
                ('grade', models.CharField(max_length=50, verbose_name='Grade')),
                ('address', models.CharField(max_length=255, verbose_name='Address')),
                ('phone_number', models.CharField(max_length=20, null=True, verbose_name='Phone Number')),
                ('rating', models.FloatField(verbose_name='Rating')),
                ('visitor_review_count', models.IntegerField(verbose_name='Visitor Review Count')),
                ('blog_review_count', models.IntegerField(verbose_name='Blog Review Count')),
                ('reservation_site', models.CharField(max_length=255, null=True, verbose_name='Reservation Site')),
                ('map_x', models.FloatField(null=True, verbose_name='Map X')),
                ('map_y', models.FloatField(null=True, verbose_name='Map Y')),
            ],
        ),
        migrations.CreateModel(
            name='CongestionData',
            fields=[
                ('congestion_data_id', models.AutoField(primary_key=True, serialize=False, verbose_name='Congestion Data ID')),
                ('area_cd', models.CharField(max_length=20, verbose_name='Area Code')),
                ('area_nm', models.CharField(max_length=100, verbose_name='Area Name')),
                ('base_date', models.DateField(verbose_name='Base Date')),
                ('area_congest_lvl', models.CharField(max_length=20, verbose_name='Area Congestion Level')),
                ('area_congest_msg', models.TextField(verbose_name='Area Congestion Message')),
                ('area_ppltn_min', models.IntegerField(verbose_name='Area Population Min')),
                ('area_ppltn_max', models.IntegerField(verbose_name='Area Population Max')),
                ('male_ppltn_rate', models.FloatField(verbose_name='male_ppltn_rate')),
                ('female_ppltn_rate', models.FloatField(verbose_name='female_ppltn_rate')),
                ('ppltn_rate_0', models.FloatField(verbose_name='Population Rate 0')),
                ('ppltn_rate_10', models.FloatField(verbose_name='Population Rate 10')),
                ('ppltn_rate_20', models.FloatField(verbose_name='Population Rate 20')),
                ('ppltn_rate_30', models.FloatField(verbose_name='Population Rate 30')),
                ('ppltn_rate_40', models.FloatField(verbose_name='Population Rate 40')),
                ('ppltn_rate_50', models.FloatField(verbose_name='Population Rate 50')),
                ('ppltn_rate_60', models.FloatField(verbose_name='Population Rate 60')),
                ('ppltn_rate_70', models.FloatField(verbose_name='Population Rate 70')),
                ('resnt_ppltn_rate', models.FloatField(verbose_name='Resident Population Rate')),
                ('non_resnt_ppltn_rate', models.FloatField(verbose_name='Non-Resident Population Rate')),
                ('replace_yn', models.CharField(max_length=2, verbose_name='Replace YN')),
                ('fcst_yn', models.CharField(max_length=2, verbose_name='Forecast YN')),
                ('fcst_congest_lvl', models.CharField(max_length=20, null=True, verbose_name='Forecast Congestion Level')),
                ('fcst_ppltn_min', models.IntegerField(null=True, verbose_name='Forecast Population Min')),
                ('fcst_ppltn_max', models.IntegerField(null=True, verbose_name='Forecast Population Max')),
                ('base_time', models.TimeField(verbose_name='Base Time')),
                ('fcst_date', models.DateTimeField(null=True, verbose_name='Forecast Time')),
                ('fcst_time', models.TimeField(null=True, verbose_name='Forecast Time')),
                ('map_x', models.FloatField(null=True, verbose_name='Map X')),
                ('map_y', models.FloatField(null=True, verbose_name='Map Y')),
                ('address', models.CharField(max_length=255, null=True, verbose_name='Address')),
            ],
        ),
        migrations.CreateModel(
            name='Restaurant',
            fields=[
                ('restaurant_id', models.AutoField(primary_key=True, serialize=False, verbose_name='Restaurant ID')),
                ('store_name', models.CharField(max_length=100, verbose_name='Store Name')),
                ('category', models.CharField(max_length=20, verbose_name='Category')),
                ('description', models.CharField(max_length=50, null=True, verbose_name='Description')),
                ('address', models.CharField(max_length=255, verbose_name='Address')),
                ('phone_number', models.CharField(max_length=20, null=True, verbose_name='Phone Number')),
                ('rating', models.FloatField(null=True, verbose_name='Rating')),
                ('visitor_review_count', models.IntegerField(null=True, verbose_name='Visitor Review Count')),
                ('blog_review_count', models.IntegerField(null=True, verbose_name='Blog Review Count')),
                ('monday_biz_hours', models.CharField(max_length=20, null=True, verbose_name='monday_biz_hours')),
                ('monday_break_time', models.CharField(max_length=20, null=True, verbose_name='monday_break_time')),
                ('monday_last_order', models.CharField(max_length=20, null=True, verbose_name='monday_last_order')),
                ('tuesday_biz_hours', models.CharField(max_length=20, null=True, verbose_name='tuesday_biz_hours')),
                ('tuesday_break_time', models.CharField(max_length=20, null=True, verbose_name='tuesday_break_time')),
                ('tuesday_last_order', models.CharField(max_length=20, null=True, verbose_name='tuesday_last_order')),
                ('wednesday_biz_hours', models.CharField(max_length=20, null=True, verbose_name='wednesday_biz_hours')),
                ('wednesday_break_time', models.CharField(max_length=20, null=True, verbose_name='wednesday_break_time')),
                ('wednesday_last_order', models.CharField(max_length=20, null=True, verbose_name='wednesday_last_order')),
                ('thursday_biz_hours', models.CharField(max_length=20, null=True, verbose_name='thursday_biz_hours')),
                ('thursday_break_time', models.CharField(max_length=20, null=True, verbose_name='thursday_break_time')),
                ('thursday_last_order', models.CharField(max_length=20, null=True, verbose_name='thursday_last_order')),
                ('friday_biz_hours', models.CharField(max_length=20, null=True, verbose_name='friday_biz_hours')),
                ('friday_break_time', models.CharField(max_length=20, null=True, verbose_name='friday_break_time')),
                ('friday_last_order', models.CharField(max_length=20, null=True, verbose_name='friday_last_order')),
                ('saturday_biz_hours', models.CharField(max_length=20, null=True, verbose_name='saturday_biz_hours')),
                ('saturday_break_time', models.CharField(max_length=20, null=True, verbose_name='saturday_break_time')),
                ('saturday_last_order', models.CharField(max_length=20, null=True, verbose_name='saturday_last_order')),
                ('sunday_biz_hours', models.CharField(max_length=20, null=True, verbose_name='sunday_biz_hours')),
                ('sunday_break_time', models.CharField(max_length=20, null=True, verbose_name='sunday_break_time')),
                ('sunday_last_order', models.CharField(max_length=20, null=True, verbose_name='sunday_last_order')),
                ('map_x', models.FloatField(null=True, verbose_name='Map X')),
                ('map_y', models.FloatField(null=True, verbose_name='Map Y')),
            ],
        ),
        migrations.CreateModel(
            name='TourInfo',
            fields=[
                ('tourinfo_id', models.AutoField(primary_key=True, serialize=False, verbose_name='Content ID')),
                ('title', models.CharField(max_length=200, verbose_name='Title')),
                ('content_type_id', models.CharField(max_length=20, verbose_name='Content Type ID')),
                ('address', models.CharField(max_length=255, null=True, verbose_name='Address')),
                ('lDongRegnCd', models.CharField(max_length=20, verbose_name='Local Dong Code')),
                ('lDongSignguCd', models.CharField(max_length=20, verbose_name='Local Signgu Code')),
                ('phone_number', models.CharField(max_length=5000, null=True, verbose_name='Phone Number')),
                ('map_x', models.FloatField(verbose_name='Map X')),
                ('map_y', models.FloatField(verbose_name='Map Y')),
                ('category_one', models.CharField(max_length=50, null=True, verbose_name='Category 1')),
                ('category_two', models.CharField(max_length=50, null=True, verbose_name='Category 2')),
                ('category_three', models.CharField(max_length=50, null=True, verbose_name='Category 3')),
                ('content_id', models.IntegerField(verbose_name='Content ID')),
            ],
        ),
        migrations.CreateModel(
            name='Weather',
            fields=[
                ('weather_id', models.AutoField(primary_key=True, serialize=False, verbose_name='Weather ID')),
                ('area_nm', models.CharField(max_length=100, verbose_name='Area Name')),
                ('base_date', models.DateField(verbose_name='Base Date')),
                ('pcp', models.IntegerField(verbose_name='Precipitation')),
                ('pop', models.IntegerField(verbose_name='Probability of Precipitation')),
                ('pty', models.IntegerField(verbose_name='Precipitation Type')),
                ('reh', models.IntegerField(verbose_name='Relative Humidity')),
                ('sno', models.IntegerField(verbose_name='Snowfall')),
                ('sky', models.IntegerField(verbose_name='Sky Condition')),
                ('tmp', models.FloatField(verbose_name='Temperature')),
                ('tmn', models.FloatField(verbose_name='Minimum Temperature')),
                ('tmx', models.FloatField(verbose_name='Maximum Temperature')),
                ('wsd', models.IntegerField(verbose_name='Wind Direction')),
                ('base_time', models.TimeField(verbose_name='Base Time')),
                ('fcst_date', models.DateField(verbose_name='Forecast Data')),
                ('fcst_time', models.TimeField(verbose_name='Forecast Time')),
                ('nx', models.IntegerField(verbose_name='NX')),
                ('ny', models.IntegerField(verbose_name='NY')),
                ('map_x', models.FloatField(null=True, verbose_name='Map X')),
                ('map_y', models.FloatField(null=True, verbose_name='Map Y')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('username', models.CharField(max_length=50)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ChatSession',
            fields=[
                ('chat_session_id', models.AutoField(primary_key=True, serialize=False, verbose_name='Chat Session ID')),
                ('chat_session_title', models.CharField(max_length=255, verbose_name='Chat Session Title')),
                ('chat_session_info', models.TextField(null=True, verbose_name='Chat Session Info')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User ID')),
            ],
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('chat_message_id', models.AutoField(primary_key=True, serialize=False, verbose_name='Chat Message ID')),
                ('chat_order_number', models.IntegerField(verbose_name='Chat Order Number')),
                ('chat_sender', models.CharField(max_length=10, verbose_name='Chat Sender')),
                ('message', models.TextField(null=True, verbose_name='Message')),
                ('message_type', models.CharField(max_length=10, verbose_name='Message Type')),
                ('message_time', models.DateTimeField(auto_now_add=True, verbose_name='Message Time')),
                ('chat_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.chatsession', verbose_name='Chat Session ID')),
            ],
        ),
    ]
